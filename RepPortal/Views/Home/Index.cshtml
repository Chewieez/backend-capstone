@inject SignInManager<ApplicationUser> SignInManager
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService
@inject RepPortal.Services.IApplicationConfiguration AppSettings;
@model IEnumerable<RepPortal.Models.Note>


@{
    ViewData["Title"] = "Home Page";
}


@if (SignInManager.IsSignedIn(User))
{
    <div class="row">
        <div class="col-sm-8">
            <div class="mapContainer">
                <div id="map"></div>
                <div id="legend">

                    <div id="legend-innerContainer"><span class="bold">Legend:</span></div>
                </div>

            </div>
            <input id="pac-input" class="controls" type="text" placeholder="Search">
        </div>

        <div class="col-sm-4">
            <h3>Notes:</h3>
            <div class="">
                @await Component.InvokeAsync("Notes")
            </div>
        </div>
    </div>
    <div class="col-md-offset-8 col-md-4">
        @await Component.InvokeAsync("FlagsList")
    </div>

}

@if (SignInManager.IsSignedIn(User) && User.IsInRole("Administrator"))
{
    <div>

        <a asp-controller="Stores" asp-action="Create" class="btn btn-primary">Add A Store</a>
    </div>
}


<script type="text/javascript">
    const googleAPI = Object.create(null, {
        "key": {
            get: () => '@AppSettings.GoogleAPIKey'
        }
    })
    Object.freeze(googleAPI)
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=@(AppSettings.GoogleAPIKey)&libraries=places"></script>
