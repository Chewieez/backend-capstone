@inject SignInManager<ApplicationUser> SignInManager
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService
@inject RepPortal.Services.IApplicationConfiguration AppSettings;


@{
    ViewData["Title"] = "Home Page";
}


@if (SignInManager.IsSignedIn(User))
{
    <div class="row">
        <div class="col-sm-9">
            <div class="mapContainer">
                <div id="map"></div>
                <div id="legend">
                    <h4>Legend</h4>
                    <div id="legend-innerContainer"></div>
                </div>
            </div>
        </div>

        <div class="col-sm-3">
            <h3>Notes:</h3>
            <div id="notes" class="">
                <p>Notes go here:</p>
                @await Html.PartialAsync("_NotesViewPartial")
            </div>
            <div id="createNote">
                @await Html.PartialAsync("_CreateNotePartial")
            </div>
            <asp type="button" class="btn btn-primary" asp-controller="Notes" asp-action="Create" value="Add Note"/>
        </div>
    </div>

}

@if (SignInManager.IsSignedIn(User) && User.IsInRole("Administrator"))
{
    <div>

        <a asp-controller="Stores" asp-action="Create" class="btn btn-primary">Add A Store</a>
    </div>
}


<script type="text/javascript">
    const googleAPI = Object.create(null, {
        "key": {
            get: () => '@AppSettings.GoogleAPIKey'
        }
    })
    Object.freeze(googleAPI)
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=@(AppSettings.GoogleAPIKey)"></script>
